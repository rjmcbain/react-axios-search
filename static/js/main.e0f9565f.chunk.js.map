{"version":3,"sources":["api/unsplash.js","components/ImageCard.js","components/ImageList.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","ImageCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","setState","state","React","createRef","addEventListener","_this$props$image","image","description","urls","react_default","a","createElement","style","gridRowEnd","concat","ref","alt","src","regular","Component","ImageList","images","map","ImageCard_ImageCard","key","id","className","SearchBar","term","onSubmit","e","preventDefault","_this2","type","placeholder","value","onChange","target","App","_callee","response","regenerator_default","wrap","_context","prev","next","unsplash","get","params","query","sent","data","results","stop","marginTop","components_SearchBar","ImageList_ImageList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAEeA,WAAMC,OAAO,CAC1BC,QAAS,2BACTC,QAAS,CACPC,cACE,gFCJeC,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,SAAW,WACT,IAAMC,EAASR,EAAKS,SAASC,QAAQC,aAC/BC,EAAQC,KAAKC,KAAKN,EAAS,IAEjCR,EAAKe,SAAS,CAAEH,WAbhBZ,EAAKgB,MAAQ,CAAEJ,MAAO,GAEtBZ,EAAKS,SAAWQ,IAAMC,YALLlB,mFASjBG,KAAKM,SAASC,QAAQS,iBAAiB,OAAQhB,KAAKI,2CAU7C,IAAAa,EACuBjB,KAAKJ,MAAMsB,MAAjCC,EADDF,EACCE,YAAaC,EADdH,EACcG,KACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,WAAU,QAAAC,OAAU1B,KAAKa,MAAMJ,SAC3CY,EAAAC,EAAAC,cAAA,OAAKI,IAAK3B,KAAKM,SAAUsB,IAAKT,EAAaU,IAAKT,EAAKU,kBAxBtBC,cCExB,SAASC,EAAUpC,GAChC,IAAMqC,EAASrC,EAAMqC,OAAOC,IAAI,SAAAhB,GAC9B,OAAOG,EAAAC,EAAAC,cAACY,EAAD,CAAWC,IAAKlB,EAAMmB,GAAInB,MAAOA,MAE1C,OAAOG,EAAAC,EAAAC,cAAA,OAAKe,UAAU,cAAcL,aCwBvBM,6MA7Bb1B,MAAQ,CAAE2B,KAAM,MAEhBC,SAAW,SAAAC,GACTA,EAAEC,iBAIF9C,EAAKD,MAAM6C,SAAS5C,EAAKgB,MAAM2B,+EAGxB,IAAAI,EAAA5C,KACP,OACEqB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,cACbjB,EAAAC,EAAAC,cAAA,QAAMkB,SAAUzC,KAAKyC,SAAUH,UAAU,WACvCjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,SACbjB,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SACEsB,KAAK,OACLC,YAAY,gBACZC,MAAO/C,KAAKa,MAAM2B,KAClBQ,SAAU,SAAAN,GAAC,OAAIE,EAAKhC,SAAS,CAAE4B,KAAME,EAAEO,OAAOF,qBArBpChB,aC0BTmB,6MArBbrC,MAAQ,CACNoB,OAAQ,MAGVQ,+CAAW,SAAAU,EAAMX,GAAN,IAAAY,EAAA,OAAAC,EAAA/B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACcC,EAASC,IAAI,iBAAkB,CACpDC,OAAQ,CAAEC,MAAOrB,KAFV,OACHY,EADGG,EAAAO,KAITjE,EAAKe,SAAS,CAAEqB,OAAQmB,EAASW,KAAKC,UAJ7B,wBAAAT,EAAAU,SAAAd,EAAAnD,uIAQT,OACEqB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,eAAed,MAAO,CAAE0C,UAAW,SAChD7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAW1B,SAAUzC,KAAKyC,WAC1BpB,EAAAC,EAAAC,cAAC6C,EAAD,CAAWnC,OAAQjC,KAAKa,MAAMoB,iBAhBpBF,aCMEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e0f9565f.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://api.unsplash.com\",\n  headers: {\n    Authorization:\n      \"Client-ID c0d3f90b3f7212003f0d5e5314cb5180a5b59afc15a2eb3a4cefaca754d88cf7\"\n  }\n});\n","import React, { Component } from \"react\";\n\nexport default class ImageCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { spans: 0 };\n\n    this.imageRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.imageRef.current.addEventListener(\"load\", this.setSpans);\n  }\n\n  setSpans = () => {\n    const height = this.imageRef.current.clientHeight;\n    const spans = Math.ceil(height / 10);\n\n    this.setState({ spans });\n  };\n\n  render() {\n    const { description, urls } = this.props.image;\n    return (\n      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\n        <img ref={this.imageRef} alt={description} src={urls.regular} />\n      </div>\n    );\n  }\n}\n","import \"./ImageList.css\";\nimport React from \"react\";\nimport ImageCard from \"./ImageCard\";\n\nexport default function ImageList(props) {\n  const images = props.images.map(image => {\n    return <ImageCard key={image.id} image={image} />;\n  });\n  return <div className=\"image-list\">{images}</div>;\n}\n","import React, { Component } from \"react\";\n\nclass SearchBar extends Component {\n  state = { term: \"\" }; // 2nd\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    // const { term } = this.state;\n\n    this.props.onSubmit(this.state.term);\n  };\n\n  render() {\n    return (\n      <div className=\"ui segment\">\n        <form onSubmit={this.onSubmit} className=\"ui form\">\n          <div className=\"field\">\n            <label>Image Search</label>\n            <input\n              type=\"text\"\n              placeholder=\"Search Images\"\n              value={this.state.term}\n              onChange={e => this.setState({ term: e.target.value })} // 1st\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport unsplash from \"./api/unsplash\";\nimport ImageList from \"./components/ImageList\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\n\nclass App extends Component {\n  state = {\n    images: []\n  };\n\n  onSubmit = async term => {\n    const response = await unsplash.get(\"/search/photos\", {\n      params: { query: term }\n    });\n    this.setState({ images: response.data.results });\n  };\n\n  render() {\n    return (\n      <div className=\"ui container\" style={{ marginTop: \"10px\" }}>\n        <SearchBar onSubmit={this.onSubmit} />\n        <ImageList images={this.state.images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}